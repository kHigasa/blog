<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Koji Higasa&#39;s Blog</title>
        <link>https://khigasa.github.io/blog/</link>
        <description>Recent content on Koji Higasa&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>kojihigasa@gmail.com (Koji Higasa)</managingEditor>
        <webMaster>kojihigasa@gmail.com (Koji Higasa)</webMaster>
        <lastBuildDate>Mon, 06 Apr 2020 23:26:43 +0900</lastBuildDate><atom:link href="https://khigasa.github.io/blog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>正則なn次正方行列Aの余因子行列の行列式が|A|のn-1乗であることの証明</title>
        <link>https://khigasa.github.io/blog/%E6%AD%A3%E5%89%87%E3%81%AAn%E6%AC%A1%E6%AD%A3%E6%96%B9%E8%A1%8C%E5%88%97a%E3%81%AE%E4%BD%99%E5%9B%A0%E5%AD%90%E8%A1%8C%E5%88%97%E3%81%AE%E8%A1%8C%E5%88%97%E5%BC%8F%E3%81%8Ca%E3%81%AEn-1%E4%B9%97%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E8%A8%BC%E6%98%8E/</link>
        <pubDate>Mon, 06 Apr 2020 23:26:43 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/%E6%AD%A3%E5%89%87%E3%81%AAn%E6%AC%A1%E6%AD%A3%E6%96%B9%E8%A1%8C%E5%88%97a%E3%81%AE%E4%BD%99%E5%9B%A0%E5%AD%90%E8%A1%8C%E5%88%97%E3%81%AE%E8%A1%8C%E5%88%97%E5%BC%8F%E3%81%8Ca%E3%81%AEn-1%E4%B9%97%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E8%A8%BC%E6%98%8E/</guid>
        <description>&lt;p&gt;行列式のn乗を求めて解答する問題があったが, その際設問の誘導に従って使用した式変形が有用であったのでここにその証明を付しておく.&lt;/p&gt;
&lt;!--toc--&gt;
&lt;h1 id=&#34;証明する命題&#34;&gt;証明する命題
&lt;/h1&gt;&lt;p&gt;If
$$
\mathrm{det}A\neq0,
$$
then
$$
\mathrm{det}(\mathrm{adj}A) = (\mathrm{det}A)^{n-1}.
$$
ここで, $\mathrm{det}A$(ディターミナントエー)は$A$の行列式, $\mathrm{adj}A$(アジョイントエー)は$A$の余因子行列を表す.&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;このYouTube動画をそのまま踏襲したのでここに予め記しておきます.
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/3MYHz2z0Cs0&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;proof&#34;&gt;&lt;em&gt;Proof.&lt;/em&gt;
&lt;/h2&gt;&lt;p&gt;まず正則なn次正方行列$A$の余因子行列に対して,
$$
A\cdot\mathrm{adj}A=\mathrm{adj}A{\cdot}A=\mathrm{det}A{\cdot}I_n
$$
が成り立つ(ここで$I_n$はn次単位行列を表す). これは行列式の行と列に関する余因子展開により速やかに示される主張である. ここで証明を付すことはしないが, 入門程度の教科書にて一度証明を追った後は覚えておくと良い.&lt;/p&gt;
&lt;p&gt;次に上式の行列式を取ると,
$$
\mathrm{det}(A\cdot\mathrm{adj}A)=\mathrm{det}A{\cdot}\mathrm{det}(\mathrm{adj}A)(\because乗法定理^{*1})
$$
$$
=\mathrm{det}(\mathrm{det}A{\cdot}I_n)=
\mathrm{det}\left(
\begin{array}{cccc}
\mathrm{det}A &amp;amp; 0 &amp;amp; \ldots &amp;amp; 0 \cr
0 &amp;amp; \mathrm{det}A &amp;amp; \ldots &amp;amp; 0 \cr
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \cr
0 &amp;amp; 0 &amp;amp; \ldots &amp;amp; \mathrm{det}A
\end{array}
\right)=
(\mathrm{det}A)^n
$$
$^{*1}$2つのn次正方行列の積の行列式$\mathrm{det}AB$は各行列の行列式の積$\mathrm{det}A\cdot\mathrm{det}B$に等しい(行列式の交代性と多重線形性による帰結 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;となる. 最後に両辺を$\mathrm{det}A(\neq0)$で割って求める式
$$
\mathrm{det}(\mathrm{adj}A) = (\mathrm{det}A)^{n-1}
$$
を得る.&lt;div style=&#34;text-align: right&#34;&gt;$\Box$&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;斉藤正彦. 2014. 線形代数学. 東京図書.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://khigasa.github.io/blog/search/</link>
        <pubDate>Sat, 13 Apr 2019 21:23:01 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/search/</guid>
        <description></description>
        </item>
        <item>
        <title>About Me</title>
        <link>https://khigasa.github.io/blog/about/</link>
        <pubDate>Sat, 13 Apr 2019 21:22:55 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/about/</guid>
        <description>&lt;h1 id=&#34;koji-higasa--樋笠-宏次-&#34;&gt;Koji Higasa ( 樋笠 宏次 )
&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;profile&#34;&gt;Profile
&lt;/h2&gt;&lt;hr&gt;
&lt;!--toc--&gt;
&lt;!-- ## Career --&gt;
&lt;!-- ## Education --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;affiliation&#34;&gt;Affiliation
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;certification&#34;&gt;Certification
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;activities&#34;&gt;Activities
&lt;/h2&gt;&lt;h3 id=&#34;--products&#34;&gt;- Products
&lt;/h3&gt;&lt;h3 id=&#34;--writing&#34;&gt;- Writing
&lt;/h3&gt;&lt;h3 id=&#34;--competition&#34;&gt;- Competition
&lt;/h3&gt;&lt;h3 id=&#34;--participation&#34;&gt;- Participation
&lt;/h3&gt;&lt;hr&gt;
&lt;h2 id=&#34;network&#34;&gt;Network
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;workspace&#34;&gt;Workspace
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;public-key&#34;&gt;Public Key
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;GnuPG ( RSA4096bit )&lt;/code&gt; Public Key&amp;rsquo;s fingerprint hashed by &lt;code&gt;sha3-512&lt;/code&gt;. When you want to use my public key (separately I send), please make sure this hash value.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;715e8927aebb34e43796f10cc6fd3e51837ea2c206e3344b08533ab6dd28d714c58d2faafbf026029ab99ec8252afb1d25fcc727a43b7eeda9486a0d3fd0cf89
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;wallet&#34;&gt;Wallet
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bitcoin(BTC)
&lt;img src=&#34;https://khigasa.github.io/blog/images/btc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Bitcoin(BTC)&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PayPal.Me&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://paypal.me/khigasa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;paypal.me/khigasa&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interests&#34;&gt;Interests
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;favorites&#34;&gt;Favorites
&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&#34;finally&#34;&gt;Finally
&lt;/h2&gt;&lt;p&gt;Thank you very much for your interest. Please enjoy yourself :)&lt;/p&gt;
&lt;!--
```
                                                                            .9b.
                                                                           .KdD!+?z!(&lt;~_..
                                                                           (0H&gt;.=?&lt;`_`-- (&lt;.
                                                                          .#dD`(z?&lt; &gt;_._~&lt; -&lt;.
                                                                          JwH&gt; !!(_.__&lt;~ ~ &lt;.&lt;-.
                                                                         .Dd=&lt;&lt;&lt;?!~`~~-._ -..+=l1-.
                                  .._(+. .                               JwF            ~_&lt;&gt;&gt;???&lt;?!
                                (((.(dD` .g2.                        .J&lt;&lt;Xd
                           ....,,.6`+m,!.mC.}                       .:(Jk+(1-
                    ..-+&lt;&lt;&lt;~~..._~&lt;.  .&gt;-(&lt;~&lt;&lt;+.                  ..:_&lt;JYUxJ!
               ..+z&gt;~~~~_~~~~~......__........_?l             ..?&lt;_-~~(KQI&lt;O
            .J&gt;~~:::~_::__~~~...~~-__..........._1.        ..?!_(J??!!dGf!!
         .J!(:::~____(:&lt;~_:::___~(v?1i--~~~~___...?i.....-?!_-J?      ?&#34;
       .J&gt;___~&lt;~::::__(((_+(:~~~~(o&gt;&gt;/(.!=O+--_~~~~__.~~___(/!
      .C~:~&lt;(+&lt;+&lt;(&lt;&lt;_&lt;??&gt;&lt;(++(_~~~_?1--/(J&gt;_~~&lt;O&lt;?&lt;++(((-?!
      v~(?&gt;&gt;&lt;+&lt;&lt;&lt;????&lt;&lt;&lt;(&lt;1???&lt;::::::::&lt;::~::~(2 
     .&gt;:~&lt;&lt;&lt;&lt;???++?&lt;&lt;+???&lt;&lt;&gt;;:::::::::~::~:::_J
     J~_(????+?&lt;&gt;?1??&lt;?&gt;&gt;+????&lt;:::::::(((::~~j
    .C~:&lt;1zz&amp;zzzlzz&lt;&lt;?777777777&lt;1&lt;~_z!`  _I::j
    (&lt;(r`   v;j!                 I:({     (_:j_
    v:J`   .I:z                 .I:j      .c~(:
   .I&lt;C    .&gt;&lt;r                 .&gt;(C       I:()
   (&lt;(!    (&lt;j:                 ,&lt;(}       j&lt;&lt;\
   I:v     z;v                  j:j        .&gt;:I
  .I(\     I&lt;2                  I:v         I:I
  (;j`    .&gt;+{                 .I;C         I:v
.zC(z+  .-z;ji.                .&gt;+}        .j&lt;I.
(+Jz+J  (x++++}              (J&lt;;?+}      (&lt;(+:&lt;l)
```

**\*Lisp alien\*** ( Good Bye... )
--&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Contact</title>
        <link>https://khigasa.github.io/blog/contact/</link>
        <pubDate>Sat, 13 Apr 2019 21:22:47 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/contact/</guid>
        <description>&lt;form action=&#34;https://getform.io/f/b2fc722e-6b58-4684-8a02-c19abba6c8b6&#34; method=&#34;POST&#34;&gt;
&lt;p&gt;&lt;label for=&#34;name&#34;&gt;Name&lt;/label&gt;
&lt;input type=&#34;text&#34; name=&#34;name&#34; style=&#34;width:100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; margin-top: 6px; margin-bottom: 16px; resize: vertical&#34;&gt;
&lt;label for=&#34;name&#34;&gt;Email&lt;/label&gt;
&lt;input type=&#34;email&#34; name=&#34;email&#34; style=&#34;width:100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; margin-top: 6px; margin-bottom: 16px; resize: vertical&#34;&gt;
&lt;label for=&#34;name&#34;&gt;Subject&lt;/label&gt;
&lt;input type=&#34;subject&#34; name=&#34;subject&#34; style=&#34;width:100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; margin-top: 6px; margin-bottom: 16px; resize: vertical&#34;&gt;
&lt;label for=&#34;name&#34;&gt;Content&lt;/label&gt;&lt;/p&gt;
  &lt;textarea id=&#34;content&#34; name=&#34;content&#34; placeholder=&#34;Write something..&#34; style=&#34;height:200px; width:100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; margin-top: 6px; margin-bottom: 16px; resize: vertical&#34;&gt;&lt;/textarea&gt;
&lt;p&gt;&lt;button type=&#34;submit&#34; style=&#34;background-color: #000; color: white; padding: 12px 20px; border: none; border-radius: 4px; cursor: pointer;&#34;&gt;Send&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;h2 id=&#34;or-communucate-directly-on-wechatkhigasa&#34;&gt;Or communucate directly on WeChat(khigasa).
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://khigasa.github.io/blog/images/wechat.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;WeChat&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>mkdir</title>
        <link>https://khigasa.github.io/blog/mkdir/</link>
        <pubDate>Thu, 14 Feb 2019 10:04:59 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/mkdir/</guid>
        <description>&lt;p&gt;This time, I wrote unix &lt;code&gt;mkdir&lt;/code&gt;&amp;ndash;&lt;em&gt;make directories&lt;/em&gt; command with rust.&lt;/p&gt;
&lt;!--toc--&gt;
&lt;p&gt;&lt;em&gt;Code on my GitHub repo:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 168px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/kHigasa/rustcli/blob/master/mkdir/mkdir/src/main.rs&#34; data-iframely-url=&#34;//cdn.iframe.ly/8tLVzR6&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;em&gt;Live coding demo on my YouTube channel:&lt;/em&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/d2k3FXUmH7I&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;tasks&#34;&gt;Tasks
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Make directories -&amp;gt; use &lt;code&gt;std::fs&lt;/code&gt; module &lt;code&gt;create_dir&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Parse command line option -&amp;gt; use &lt;code&gt;getopts&lt;/code&gt; crate&lt;/li&gt;
&lt;li&gt;Set permission -&amp;gt; use &lt;code&gt;std::os::unix::fs&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pseudo-code&#34;&gt;Pseudo code
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;options.match
    m =&amp;gt; mkdir; set permission;
    p =&amp;gt; mkdir recursively;
    h =&amp;gt; print usage;
    _ =&amp;gt; if !args.is_empty()
             mkdir;
         else
             print usage;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tips&#34;&gt;Tips
&lt;/h3&gt;&lt;p&gt;Use &lt;code&gt;getopts&lt;/code&gt; crate to parse option easily :)&lt;/p&gt;
&lt;h4 id=&#34;references&#34;&gt;References
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doc.rust-lang.org/std/fs/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Module std::fs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.rs/getopts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Crate getopts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.gnu.org/software/coreutils/mkdir&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mkdir: Make directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Rustcli</title>
        <link>https://khigasa.github.io/blog/rustcli/</link>
        <pubDate>Wed, 13 Feb 2019 13:43:54 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/rustcli/</guid>
        <description>&lt;p&gt;I write basic UNIX/LINUX commands in Rust.&lt;/p&gt;
&lt;!--toc--&gt;
&lt;p&gt;&lt;strong&gt;Commands:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://khigasa.github.io/blog/mkdir/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mkdir&lt;/a&gt; - make directories&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://khigasa.github.io/blog/cat/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cat&lt;/a&gt; - concatenate files and print on the standard output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; coming soon.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kHigasa/rustcli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Source code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bibliography:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doc.rust-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rust lang documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>リカート-アグラワラアルゴリズム、名前が気に入ったのでまとめてみた</title>
        <link>https://khigasa.github.io/blog/%E3%83%AA%E3%82%AB%E3%83%BC%E3%83%88-%E3%82%A2%E3%82%B0%E3%83%A9%E3%83%AF%E3%83%A9%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E5%90%8D%E5%89%8D%E3%81%8C%E6%B0%97%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/</link>
        <pubDate>Sun, 16 Dec 2018 11:27:08 +0900</pubDate>
        <author>kojihigasa@gmail.com (Koji Higasa)</author>
        <guid>https://khigasa.github.io/blog/%E3%83%AA%E3%82%AB%E3%83%BC%E3%83%88-%E3%82%A2%E3%82%B0%E3%83%A9%E3%83%AF%E3%83%A9%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E5%90%8D%E5%89%8D%E3%81%8C%E6%B0%97%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
        <description>&lt;p&gt;この記事は&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/advent-calendar/2018/pepabo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GMOペパボ Advent Calendar 2018&lt;/a&gt; 12月16日の記事です。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://iips.icci.edu.iq/images/exam/Abraham-Silberschatz-Operating-System-Concepts---9th2012.12.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OPERATING SYSTEM CONCEPTS&lt;/a&gt;を読んで面白かった章の一つ &lt;em&gt;process synchronization&lt;/em&gt; についてちょっと深めてみました。&lt;/p&gt;
&lt;!--toc--&gt;
&lt;h2 id=&#34;まずクリティカルセクションについてちょっと触れておく&#34;&gt;まずクリティカルセクションについてちょっと触れておく
&lt;/h2&gt;&lt;p&gt;クリティカルセクション(CS)は、その名の通り&amp;quot;&lt;em&gt;危険な部分&lt;/em&gt;&amp;ldquo;で実態はコードの集まりです。プロセスはそれぞれCSを所有し、CSで作成したり更新したり色々なことをします。また、システムはCSに1つのプロセスのみが入るように制御しなければいけません。なぜなら、あるCSを共有する複数のプロセスが、そのCSに同時に入り、何かを作成したり更新したりすると、共有のデータに不整合が生じ、そのデータは破壊され、システムとして破綻をきたすためです。&lt;/p&gt;
&lt;p&gt;以下、本題に入ります。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要
&lt;/h2&gt;&lt;p&gt;分散システムのプロセス同期において、クリティカルセクションのMutual Exclusion(ME、相互排他)を実現するアルゴリズムの一つであるRicart-Agrawala&amp;rsquo;s(RA) Algorithmについてまとめます。&lt;/p&gt;
&lt;p&gt;分散システムにおいてMEを満たすには以下の３つの基本的な手法があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;non-token-based approach&lt;/li&gt;
&lt;li&gt;token-based approach&lt;/li&gt;
&lt;li&gt;quorum-based approach&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RA Algorithmは1に属するものですが、とりあえずそれぞれ軽く触れておきます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ノントークンベース手法：複数プロセスがメッセージ交換を行う。&lt;/li&gt;
&lt;li&gt;トークンベース手法：複数プロセスがトークンの授受を行う。&lt;/li&gt;
&lt;li&gt;コーラムベース手法：CSの占有権を求めるプロセスが、CSを実行するために他のプロセスの部分集合から許可を得る。わかりにくいですが、コーラムについてはこちらのQiitaの記事が大変参考になりました。&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/everpeace/items/632831371da5ff215995&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最近よく聞くQuorumは過半数(多数決)よりも一般的でパワフルな概念だった&lt;/a&gt;(またブロックチェーン界隈では、こんなのもあるようです。&lt;a class=&#34;link&#34; href=&#34;https://www.jpmorgan.co.jp/country/JP/ja/Quorum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quorum Advancing Blockchain Technology&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;それぞれの手法によって、複数プロセスが相互に通信を行いCSの占有権の授受を行っています。&lt;/p&gt;
&lt;h2 id=&#34;排他制御アルゴリズム色々&#34;&gt;排他制御アルゴリズム色々
&lt;/h2&gt;&lt;p&gt;ノントークンベース手法において、RA AlgorithmはLamport&amp;rsquo;s Algorithmを修正したアルゴリズムです。また、Lodha-Kshemkalyani&amp;rsquo;s AlgorithmはそのRAを修正したものとなっています。他にもトークンベース手法においては、Raymond&amp;rsquo;s Algorithmやそれを修正したKanrar-Chiaki Algorithm、Suzuki-Kasami Algorithmなどがあり、コーラムベース手法ではMaekawa&amp;rsquo;s Algorithmなどがあります。こういったように系譜を少したどるだけでも有名な様々なアルゴリズムが存在することがわかります。&lt;/p&gt;
&lt;p&gt;最近でもこれらのアルゴリズムを組み合わせたり、拡張することによっていくつかのアルゴリズムが論文で発表されています。最新のもので面白いものがあったのでそれについて書こうかと思っていたのですが、一般には有料の論文であったためここでは留めておきます(興味のある方は話しましょう!)。が、代わりに論文にあたっていた際に偶然ヒットしたこちらのスライド（&lt;a class=&#34;link&#34; href=&#34;https://www.nii.ac.jp/sparc/event/2010/pdf/5/1_ojiro_220924.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;大学図書館における電子ジャーナル契約の現状と課題 〜ビッグディールの光と影〜&lt;/a&gt;）がちょっと古いものですが、へーといった感じだったので紹介しておきます。&lt;/p&gt;
&lt;h2 id=&#34;ricart-agrawalas-algorithmについて&#34;&gt;Ricart-Agrawala&amp;rsquo;s Algorithmについて
&lt;/h2&gt;&lt;p&gt;これは1981年に発表された古典的なアルゴリズムの一つで、以下内容をまとめます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;あるプロセスP&lt;sub&gt;i&lt;/sub&gt;がCSの占有権を求めるとします。この時、P&lt;sub&gt;i&lt;/sub&gt;は他のすべてのプロセスに対して、&amp;lt; T&lt;sub&gt;i&lt;/sub&gt;, i&amp;gt;の形のリクエストをキャストします（マルチキャストを行う）。ここでT&lt;sub&gt;i&lt;/sub&gt;はランポートの論理時計による現在のタイムスタンプを表しており、これは端的にいうとただの時刻です。分散システムでは共通の物理時計がないため、これがその代役を担います。時間を事象発生の前後関係に基づく因果律によって論理的に定義しています。こちらの資料&lt;a class=&#34;link&#34; href=&#34;http://www-masu.ist.osaka-u.ac.jp/~kakugawa/distalg.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分散アルゴリズム入門&lt;/a&gt;に設計・実装などが載っていました。&lt;/li&gt;
&lt;li&gt;P&lt;sub&gt;i&lt;/sub&gt;は他のすべてのプロセスがこのリクエストに対してOKのレスポンスを返してくれるまで待ちます。すべてのOKの返事が集まれば、P&lt;sub&gt;i&lt;/sub&gt;はCSを占有できるようになります。&lt;/li&gt;
&lt;li&gt;もし他のプロセスP&lt;sub&gt;j&lt;/sub&gt;&amp;lt; T&lt;sub&gt;j&lt;/sub&gt;, j&amp;gt;(T&lt;sub&gt;j&lt;/sub&gt;&amp;gt;T&lt;sub&gt;i&lt;/sub&gt;)がCSを占有していたり、CSの占有権を要求していたとすると、&amp;lt; T&lt;sub&gt;i&lt;/sub&gt;, i&amp;gt;のリクエストはキューに入り自分に占有権が廻ってくるのを待ちます。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上がそのロジックなのですが、言葉ではわかりにくいので、具体的にして今、{P&lt;sub&gt;1&lt;/sub&gt;, P&lt;sub&gt;2&lt;/sub&gt;, P&lt;sub&gt;3&lt;/sub&gt;, P&lt;sub&gt;4&lt;/sub&gt;, P&lt;sub&gt;5&lt;/sub&gt;, P&lt;sub&gt;6&lt;/sub&gt;}の6つのプロセスがあるとし、P&lt;sub&gt;2&lt;/sub&gt;とP&lt;sub&gt;5&lt;/sub&gt;がT&lt;sub&gt;2&lt;/sub&gt;=13、T&lt;sub&gt;5&lt;/sub&gt;=7でリクエストを送り、その時P&lt;sub&gt;3&lt;/sub&gt;がCSにアクセスしている状況を考えます。&lt;/p&gt;
&lt;p&gt;まず、P&lt;sub&gt;5&lt;/sub&gt;はT&lt;sub&gt;5&lt;/sub&gt;=7で、P&lt;sub&gt;2&lt;/sub&gt;はT&lt;sub&gt;2&lt;/sub&gt;=13で、すべてのプロセスに対してリクエストを送信します。
&lt;img src=&#34;https://khigasa.github.io/blog/images/image001.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage001&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;P&lt;sub&gt;1&lt;/sub&gt;、P&lt;sub&gt;4&lt;/sub&gt;、P&lt;sub&gt;6&lt;/sub&gt;に関してはどれもすぐにOKの返事をします。これらはどれもCSを占有してはいないし、要求してもいないので。
&lt;img src=&#34;https://khigasa.github.io/blog/images/image002.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage002&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;残りのプロセスはCSを占有していたり、要求しているものなので、無思慮に処理は進みませんが、すべてランポートの論理時計によるタイムスタンプに従って処理されていきます。今回、T&lt;sub&gt;5&lt;/sub&gt;&amp;lt; T&lt;sub&gt;2&lt;/sub&gt;なのでP&lt;sub&gt;3&lt;/sub&gt;へのリクエストにおいて、まずP&lt;sub&gt;5&lt;/sub&gt;がキューに入ります。
&lt;img src=&#34;https://khigasa.github.io/blog/images/image003.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage003&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;P&lt;sub&gt;2&lt;/sub&gt;とP&lt;sub&gt;5&lt;/sub&gt;の通信においても、同様の理由でP&lt;sub&gt;5&lt;/sub&gt;が優先され、P&lt;sub&gt;5&lt;/sub&gt;のキューにP&lt;sub&gt;2&lt;/sub&gt;が入ります。
&lt;img src=&#34;https://khigasa.github.io/blog/images/image004.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage004&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;これでP&lt;sub&gt;3&lt;/sub&gt;のリリースメッセージを受け取ると、キューによりまずP&lt;sub&gt;5&lt;/sub&gt;がCSを占有し、
&lt;img src=&#34;https://khigasa.github.io/blog/images/image005.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage005&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;P&lt;sub&gt;5&lt;/sub&gt;のリリースメッセージを受けるとP&lt;sub&gt;2&lt;/sub&gt;がCSを占有します。
&lt;img src=&#34;https://khigasa.github.io/blog/images/image006.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RAImage006&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;これでRAではMEが達成でき、プロセスのCS占有権リクエストはレスポンスやキューに入るなど、どんな形であれ処理されるので、リクエスト元クライアントの同期遅延は &lt;em&gt;&lt;strong&gt;O&lt;/strong&gt;&lt;/em&gt;(1)のオーダーとかなり小さくなるのですが、一方、リクエストはマルチキャストを伴っており、さらに言うと、CS開放の際のリリースメッセージも実はマルチキャストを伴っていたりするので、そのデータ通信量（&lt;em&gt;Bandwidth&lt;/em&gt;??）は &lt;em&gt;&lt;strong&gt;O&lt;/strong&gt;&lt;/em&gt;(n)のオーダーに膨らみ、nが増えればかなりつらいことになります。一長一短ですね。アルゴリズムの比較系の論文はたくさんあるので（比較指標がほぼ決まっているので書きやすいのかもしれません）、単純な頭の体操が好きな人は暇な時に調べてみるとちょっと幸せになるかもしれません。ex/&lt;a class=&#34;link&#34; href=&#34;https://pdfs.semanticscholar.org/3b82/5910741d7b1e8a9eb92cbdf139ed3bbb95c1.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A Comparative Study of Ricart-Agrawala and
Maekawa Distributed Mutual Exclusion Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードがないのも味気ないのですが、興味がある方は他をあたってくださいmm ロジックとしては単純ですが、実装は大変です。（僕が調べた限りでは、Java, C, C++, Pythonで実装されたものが見つかりました ex/&lt;a class=&#34;link&#34; href=&#34;http://codingtechlife.blogspot.com/2017/11/write-c-program-to-implement-ricart.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;
Write a C program to implement Ricart-Agrawala algorithm for distributed mutual exclusion - Distributed Computing Assignment - BITS -WILP&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に
&lt;/h2&gt;&lt;p&gt;僕はプログラミングにおいて形にすることから入りましたが、それは私服で山登りを始めたようなものでした。それでは山登りはできてもせいぜい高尾山とか&lt;a class=&#34;link&#34; href=&#34;https://ja.wikipedia.org/wiki/%E9%A3%AF%E9%87%8E%E5%B1%B1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;飯野山&lt;/a&gt;くらいで、直ぐ頭打ちになってしまいます。浅い技術の習得が目的化し、プログラミングという行為自体が形骸化していきます。そんな状況を打開すべくCSに関する理論書を漁りはじめ、最初に読んだのがこれだったのですが、まさに効果覿面でした。例えば、言語に対する理解も深まり、的外れの見当が減りデバッグの質が向上するなど、日々のプログラミングにおける様々な局面で良好な変化が起こりました。長い本なので僕のようにある程度の強度で全ページを読むなどと勧めるのはミスリードだと思いますが、僕はOSについて理解したい非理情のエンジニアがいれば、 &lt;em&gt;computing&lt;/em&gt; の世界に入る何らかのきっかけには必ずなると思うのでこの&lt;a class=&#34;link&#34; href=&#34;http://iips.icci.edu.iq/images/exam/Abraham-Silberschatz-Operating-System-Concepts---9th2012.12.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OPERATING SYSTEM CONCEPTS&lt;/a&gt;をおすすめします。&lt;/p&gt;
&lt;h3 id=&#34;以下駄文&#34;&gt;以下駄文
&lt;/h3&gt;&lt;p&gt;目の前の大木を見てその山の概形をつかむのが難しいように、数行のコードからそれを支える分野を把握するのは普通の人には不可能だ。実際何らかの理論書を読んだところで目に見える変化はないし、やる意義を問われればないときっぱりないと答えると思う。当人は森の一端を垣間みたことで、何か想像以上に大きなものに触れてしまったように感じ、それ以上奥に進むのを躊躇してしまうかもしれない。しかし、呑気な学習者とは愚かなもので、ひと度そんなよくわからないものに触れてしまうと、好奇心の赴くままに突き進もうとしてしまうものだ。学生時代くらいそんな遊びとも言える、一見無駄な活動に時間を使ってもいいだろう。&lt;/p&gt;
&lt;p&gt;かなり厳しいだろうが、まだなんとかなる。一度は森を感じてみたい。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;明日の担当は&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/tsumichan&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@tsumichan&lt;/a&gt;さんです、お願いいたします。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
